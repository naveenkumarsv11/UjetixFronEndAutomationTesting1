{"version":3,"file":"launcher.js","sourceRoot":"","sources":["../src/launcher.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra'\nimport { spawn, ChildProcess } from 'child_process'\nimport split2 from 'split2'\nimport logger from '@wdio/logger'\nimport tcpPortUsed from 'tcp-port-used'\nimport { SevereServiceError } from 'webdriverio'\nimport type { Options } from '@wdio/types'\n\nimport { getFilePath } from './utils'\nimport type { ServiceOptions } from './types'\n\nconst POLL_INTERVAL = 100\nconst POLL_TIMEOUT = 10000\nconst DEFAULT_PORT = 4444\n\nconst log = logger('wdio-safaridriver-service')\n\nexport default class SafariDriverLauncher {\n    private _process?: ChildProcess\n    private _outputDir?: string\n\n    constructor (\n        private _options: ServiceOptions,\n        _: never,\n        private _config: Options.Testrunner\n    ) {\n        this._outputDir = this._options.outputDir || this._config.outputDir\n    }\n\n    public async onPrepare () {\n        const args = this._options.args || []\n        const port = this._options.port || this._config.port || DEFAULT_PORT\n\n        if (!args.find((arg) => arg.startsWith('-p'))) {\n            args.push(`-p ${port}`)\n        }\n\n        log.info(`Start Safaridriver with args ${args.join(' ')}`)\n        this._process = spawn('safaridriver', args)\n\n        if (typeof this._outputDir === 'string') {\n            await this._redirectLogStream()\n        } else {\n            this._process.stdout?.pipe(split2()).on('data', log.info.bind(this))\n            this._process.stderr?.pipe(split2()).on('data', log.warn.bind(this))\n        }\n\n        try {\n            await tcpPortUsed.waitUntilUsed(port, POLL_INTERVAL, POLL_TIMEOUT)\n        } catch (err: any) {\n            throw new SevereServiceError(`Couldn't start Safaridriver: ${err.message}`)\n        }\n\n        process.on('exit', this.onComplete.bind(this))\n        process.on('SIGINT', this.onComplete.bind(this))\n        process.on('uncaughtException', this.onComplete.bind(this))\n    }\n\n    public onComplete () {\n        if (this._process) {\n            this._process.kill()\n        }\n    }\n\n    private async _redirectLogStream () {\n        const logFile = getFilePath(this._outputDir!, this._options.logFileName)\n        await fs.ensureFile(logFile)\n\n        const logStream = fs.createWriteStream(logFile, { flags: 'w' })\n        this._process?.stdout?.pipe(logStream)\n        this._process?.stderr?.pipe(logStream)\n    }\n}\n"]}