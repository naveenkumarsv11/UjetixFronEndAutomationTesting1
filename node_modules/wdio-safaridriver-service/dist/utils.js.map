{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAuB;AAEvB,MAAM,oBAAoB,GAAG,eAAe,CAAA;AAC5C,MAAM,oBAAoB,GAAG,uBAAuB,CAAA;AAEpD;;;;;;GAMG;AACH,SAAgB,WAAW,CAAE,QAAgB,EAAE,eAAe,GAAG,oBAAoB;IACjF,IAAI,YAAY,GAAG,cAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IAEzC;;;;OAIG;IACH,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,cAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE;QACzD,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,eAAe,CAAC,CAAA;KAC1D;IAED,OAAO,YAAY,CAAA;AACvB,CAAC;AAbD,kCAaC","sourcesContent":["import path from 'path'\n\nconst FILE_EXTENSION_REGEX = /\\.[0-9a-z]+$/i\nconst DEFAULT_LOG_FILENAME = 'wdio-safaridriver.log'\n\n/**\n * Resolves the given path into a absolute path and appends the default\n * filename as fallback when the provided path is a directory.\n * @param  {String} logPath         relative file or directory path\n * @param  {String} defaultFilename default file name when filePath is a directory\n * @return {String}                 absolute file path\n */\nexport function getFilePath (filePath: string, defaultFilename = DEFAULT_LOG_FILENAME) {\n    let absolutePath = path.resolve(filePath)\n\n    /**\n     * test if we already have a file (e.g. selenium.txt, .log, log.txt, etc.)\n     * NOTE: path.extname doesn't work to detect a file, cause dotfiles are\n     *       reported by node to have no extension\n     */\n    if (!FILE_EXTENSION_REGEX.test(path.basename(absolutePath))) {\n        absolutePath = path.join(absolutePath, defaultFilename)\n    }\n\n    return absolutePath\n}\n"]}