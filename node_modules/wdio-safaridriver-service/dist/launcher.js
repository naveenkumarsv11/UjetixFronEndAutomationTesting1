"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const child_process_1 = require("child_process");
const split2_1 = __importDefault(require("split2"));
const logger_1 = __importDefault(require("@wdio/logger"));
const tcp_port_used_1 = __importDefault(require("tcp-port-used"));
const webdriverio_1 = require("webdriverio");
const utils_1 = require("./utils");
const POLL_INTERVAL = 100;
const POLL_TIMEOUT = 10000;
const DEFAULT_PORT = 4444;
const log = (0, logger_1.default)('wdio-safaridriver-service');
class SafariDriverLauncher {
    constructor(_options, _, _config) {
        this._options = _options;
        this._config = _config;
        this._outputDir = this._options.outputDir || this._config.outputDir;
    }
    async onPrepare() {
        const args = this._options.args || [];
        const port = this._options.port || this._config.port || DEFAULT_PORT;
        if (!args.find((arg) => arg.startsWith('-p'))) {
            args.push(`-p ${port}`);
        }
        log.info(`Start Safaridriver with args ${args.join(' ')}`);
        this._process = (0, child_process_1.spawn)('safaridriver', args);
        if (typeof this._outputDir === 'string') {
            await this._redirectLogStream();
        }
        else {
            this._process.stdout?.pipe((0, split2_1.default)()).on('data', log.info.bind(this));
            this._process.stderr?.pipe((0, split2_1.default)()).on('data', log.warn.bind(this));
        }
        try {
            await tcp_port_used_1.default.waitUntilUsed(port, POLL_INTERVAL, POLL_TIMEOUT);
        }
        catch (err) {
            throw new webdriverio_1.SevereServiceError(`Couldn't start Safaridriver: ${err.message}`);
        }
        process.on('exit', this.onComplete.bind(this));
        process.on('SIGINT', this.onComplete.bind(this));
        process.on('uncaughtException', this.onComplete.bind(this));
    }
    onComplete() {
        if (this._process) {
            this._process.kill();
        }
    }
    async _redirectLogStream() {
        const logFile = (0, utils_1.getFilePath)(this._outputDir, this._options.logFileName);
        await fs_extra_1.default.ensureFile(logFile);
        const logStream = fs_extra_1.default.createWriteStream(logFile, { flags: 'w' });
        this._process?.stdout?.pipe(logStream);
        this._process?.stderr?.pipe(logStream);
    }
}
exports.default = SafariDriverLauncher;
//# sourceMappingURL=launcher.js.map